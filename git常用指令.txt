https://api.github.com/users/2225915455 - 查看github账号的详细信息
git config --global user.name "username" - 设置/修改用户名
git config --global user.email "email" - 设置/修改邮箱
git config user.name - 查看用户名
git config user.email - 查看邮箱
git config --list - 查看配置信息
git init - 将改路径的目录变为git可以管理的仓库
git add <file> - 把文件从工作区添加到暂缓区
git add . -> 一次性将工作区的文件全部提交到暂缓区
git commit -m <message> - 把暂缓区的文件提交当前分支(master)
git log - 查看提交历史
git log -num(指定查看几行) --pretty=oneline

工作区(add前)、暂缓区(add后, commit前)、当前分支(commit后)
版本回退
git checkout -- file - 工作区的修改全部撤销(ad d前)
git reset HEAD file - 暂存区的修改撤销掉, 重新放回工作区(add后, commit前)
git reset --hard HEAD^ - 回退一个版本(HEAD^  - 一个^返回一个, 一次返回多次HEAD~)
git reset --hard 1094a(commit的版本号前几位) - 后悔了想返回返回前的版本
git reflog - 查看命令历史(回到旧版本时查看记录)
git status - 查看暂缓区、工作区、是否提交的状态
git status -s -> 精简输出
git diff HEAD -- file - 查看工作区和版本库里面最新的把版本的区别
git rm file - 删除一个文件

github(提交到github之前记得更新本地git仓库不然部分修改可能不会同步)
git remote rm origin -> 断开本地仓库与github的关联
1.https -> 每次提交或克隆都要输入用户名和密码(或token)
	token:> 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(5.20过期, 在settings的左边最后一行的<>D生成)
	用https方式将本地的文件远程传输到github
	git remote add origin https://github.com/2225915455/programd.git(本地仓库和远程关联)
	git branch -M main
	git push -u origin main(第一次提交用这个, 后面提交用git push) -> 因为用的是https传输协议所以会弹出框要求输入用户名和密码

2.SSH -> 配置SSH Key过后就不需要输入密码和用户名
	查看是否有key
	1.终端:> cd ~/.ssh
	2.终端:> ls
	3.没有就生成key:> ssh-keygen -t rsa -b 4096 -C "2225915455@qq.com" -> 生成id_rsa和id_rsa.pub(/c/Users/xz/.ssh/id_rsa)

	github配置SSH key
	1.复制id_rsa.pub的内容
	2.github -> 头像 -> settings -> SSH and GPG Keys -> New SSH key
	Authentiction Key(身份验证密钥)和Signing Key(签名密钥) -> 签名密钥可用于对 Git 提交进行签名，身份验证密钥可用于访问存储库，可以为两者添加相同的密钥。
	3.将内容粘贴到Key文本框中, 并标识key的来处
	4.ssh -T git@github.com -> gitbush验证是否设置成功

	用SSH方式将本地的文件远程传输到github
	git remote add origin git@github.com:2225915455/programd.git(本地仓库和远程关联)
	git branch -M main
	git push -u origin main(第一次提交用这个, 后面提交用git push)
克隆远程仓库 -> git clone 远程仓库地址


本地分支操作
查看和创建分支
git branch -> 查看分支
git branch 分支名称 -> 创建分支
git checkout 分支名称 -> 切换分支
git checkout -b 分支名称 -> 快速创建并切换分支

合并分支 -> 需要将C分支合并到A分支就要先切换到A分支在mergeC分支到A分支
1.git branch main
2.git merge 分支名称 

删除分支 -> 合并分支后就将合并的分支删除
1.git branch 其他分支名称
2.git branch -d 要删除的分支名称
分支冲突(两个不同的分支都更改了同一个文件) -> 需要手动合并或修改两个冲突的分支再合并

将本地分支推送到远程仓库
git push -u 远程仓库别名 本地分支名称:远程分支名称 -> 只有第一次需要带参数-u 后面推送git push
例:> git push -u origin main -> 远程仓库别名(默认origin, main后面没有:表示远程仓库和该分支同名)


查看远程仓库的信息 -> git remote show origin
跟踪分支 -> 将远程分支下载到本地, 并把下载的分支进行重命名
git checkout 远程分支的名称
git checkout -b 本地分支名称 远程仓库名称/远程分支名称
拉取远程分支的最新代码
git pull


访问慢，去下载Fastgithub
本地不同仓库和github之间的关系, 提交的是什么分支